{
  "address": "0xdEE0dCD197b7c5fe04834f3B35b8F2137e1725A2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_agbToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_starTicket",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "matchId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "betType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "betResult",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "oddsBet",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "starTicketId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isClaim",
          "type": "bool"
        }
      ],
      "name": "BetStatus",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "matchCode",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "firstHalfResult",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "secondHalfResult",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "fulltimeResult",
          "type": "uint8"
        }
      ],
      "name": "MatchStatus",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "agbToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "betIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_matchCode",
          "type": "string"
        }
      ],
      "name": "createMatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_matchId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_betType",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_betResult",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_oddsBet",
          "type": "uint256"
        }
      ],
      "name": "getMessageHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "idToBetInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "matchId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "betType",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "betResult",
          "type": "uint8"
        },
        {
          "internalType": "uint16",
          "name": "oddsBet",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "starTicketId",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isClaim",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "idToMatchInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "matchCode",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "firstHalfResult",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "secondHalfResult",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "fulltimeResult",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "matchIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "starTicket",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_matchId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_result",
          "type": "uint8"
        }
      ],
      "name": "updateFirstHalf",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_matchId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_result",
          "type": "uint8"
        }
      ],
      "name": "updateFulltime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_matchId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_result",
          "type": "uint8"
        }
      ],
      "name": "updateSecondHalf",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_matchId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_betType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "_oddsBet",
          "type": "uint16"
        },
        {
          "internalType": "uint8",
          "name": "_betResult",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_starTicketId",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "_hashedMessage",
          "type": "bytes"
        }
      ],
      "name": "userBet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_betId",
          "type": "uint256"
        }
      ],
      "name": "userClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x86efcf633a171c5b1c30da56612bedd9ec8ff86337ba2d7d7907296bb91559a6",
  "receipt": {
    "to": null,
    "from": "0x3A50F08F2BA03677A479F4387eDe33C54454F356",
    "contractAddress": "0xdEE0dCD197b7c5fe04834f3B35b8F2137e1725A2",
    "transactionIndex": 2,
    "gasUsed": "2294377",
    "logsBloom": "0x
    "blockHash": "0xa3bbc689e23369f094a2916204ad5c353c9511453f9eb86f86ecf3a6f9cefa0c",
    "transactionHash": "0x86efcf633a171c5b1c30da56612bedd9ec8ff86337ba2d7d7907296bb91559a6",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 24955956,
        "transactionHash": "0x86efcf633a171c5b1c30da56612bedd9ec8ff86337ba2d7d7907296bb91559a6",
        "address": "0xdEE0dCD197b7c5fe04834f3B35b8F2137e1725A2",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003a50f08f2ba03677a479f4387ede33c54454f356"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xa3bbc689e23369f094a2916204ad5c353c9511453f9eb86f86ecf3a6f9cefa0c"
      }
    ],
    "blockNumber": 24955956,
    "cumulativeGasUsed": "2489349",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3A50F08F2BA03677A479F4387eDe33C54454F356",
    "0xaf9412eFD48F534ecc06cA42391a7D3c49F92B66",
    "0x9666Cfb212590A2E1ea5f9609cACD279D3357256"
  ],
  "solcInputHash": "fdc16aadb32c9a654c8ad9520d4ac359",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_agbToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_starTicket\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"matchId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"betType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"betResult\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"oddsBet\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"starTicketId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isClaim\",\"type\":\"bool\"}],\"name\":\"BetStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"matchCode\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"firstHalfResult\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"secondHalfResult\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"fulltimeResult\",\"type\":\"uint8\"}],\"name\":\"MatchStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"agbToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"betIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_matchCode\",\"type\":\"string\"}],\"name\":\"createMatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_matchId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_betType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_betResult\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_oddsBet\",\"type\":\"uint256\"}],\"name\":\"getMessageHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idToBetInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"matchId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"betType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"betResult\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"oddsBet\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"starTicketId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isClaim\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idToMatchInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"matchCode\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"firstHalfResult\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"secondHalfResult\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"fulltimeResult\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"matchIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"starTicket\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_matchId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_result\",\"type\":\"uint8\"}],\"name\":\"updateFirstHalf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_matchId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_result\",\"type\":\"uint8\"}],\"name\":\"updateFulltime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_matchId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_result\",\"type\":\"uint8\"}],\"name\":\"updateSecondHalf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_matchId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_betType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_oddsBet\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"_betResult\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_starTicketId\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_hashedMessage\",\"type\":\"bytes\"}],\"name\":\"userBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"}],\"name\":\"userClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Bet.sol\":\"Bet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfce1eb6398eae0e2b50251140866a70a3106193f101972c878bba1dbf44929ec\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x78450f4e3b722cce467b21e285f72ce5eaf361e9ba9dd2241a413926246773cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xbc991a1cf357ce19480831a40792c814238a3b5458134703682abd8aa39719fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/Bet.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nimport '@openzeppelin/contracts/utils/Counters.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\nimport '@openzeppelin/contracts/utils/cryptography/ECDSA.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC1155/IERC1155.sol';\\n\\nimport './interfaces/IStarTicket.sol';\\nimport './libraries/VerifyBetInfo.sol';\\n\\ncontract Bet is Ownable {\\n    using ECDSA for bytes32;\\n    using Counters for Counters.Counter;\\n\\n    uint8 constant NOT_END = 0;\\n    uint8 constant A_WIN = 1;\\n    uint8 constant DRAW = 2;\\n    uint8 constant B_WIN = 3;\\n\\n    uint8 constant FIRST_HALF = 0;\\n    uint8 constant SECOND_HALF = 1;\\n    uint8 constant FULLTIME = 2;\\n\\n    Counters.Counter public matchIds;\\n    Counters.Counter public betIds;\\n    address public treasury;\\n    address public agbToken;\\n    address public starTicket;\\n    mapping(uint256 => MatchInfo) public idToMatchInfo;\\n    mapping(uint256 => BetInfo) public idToBetInfo;\\n\\n    event MatchStatus(\\n        uint256 itemId,\\n        string matchCode,\\n        uint8 firstHalfResult,\\n        uint8 secondHalfResult,\\n        uint8 fulltimeResult\\n    );\\n\\n    event BetStatus(\\n        uint256 betId,\\n        uint256 matchId,\\n        uint8 betType,\\n        uint8 betResult,\\n        uint16 oddsBet, // 2/100 ~ 0.02\\n        uint256 amount,\\n        uint8 starTicketId,\\n        address user,\\n        bool isClaim\\n    );\\n\\n    struct MatchInfo {\\n        uint256 itemId;\\n        string matchCode;\\n        uint8 firstHalfResult;\\n        uint8 secondHalfResult;\\n        uint8 fulltimeResult;\\n    }\\n\\n    struct BetInfo {\\n        uint256 betId;\\n        uint256 matchId;\\n        uint8 betType;\\n        uint8 betResult;\\n        uint16 oddsBet; // 2/100 ~ 0.02\\n        uint256 amount;\\n        uint8 starTicketId;\\n        address user;\\n        bool isClaim;\\n    }\\n\\n    constructor(\\n        address _treasury,\\n        address _agbToken,\\n        address _starTicket\\n    ) {\\n        treasury = _treasury;\\n        agbToken = _agbToken;\\n        starTicket = _starTicket;\\n    }\\n\\n    function createMatch(string memory _matchCode) public onlyOwner {\\n        uint256 itemId = matchIds.current();\\n        idToMatchInfo[itemId] = MatchInfo(itemId, _matchCode, 0, 0, 0);\\n        matchIds.increment();\\n        emit MatchStatus(\\n            itemId,\\n            _matchCode,\\n            0,\\n            0,\\n            0\\n        );\\n    }\\n\\n    function updateFirstHalf(uint256 _matchId, uint8 _result) public onlyOwner {\\n        MatchInfo memory matchInfo = idToMatchInfo[_matchId];\\n        require(matchInfo.firstHalfResult == NOT_END, 'First half was updated');\\n        idToMatchInfo[_matchId].firstHalfResult = _result;\\n        emit MatchStatus(\\n            _matchId,\\n            matchInfo.matchCode,\\n            _result,\\n            0,\\n            0\\n        );\\n    }\\n\\n    function updateSecondHalf(uint256 _matchId, uint8 _result)\\n    public\\n    onlyOwner\\n    {\\n        MatchInfo memory matchInfo = idToMatchInfo[_matchId];\\n        require(\\n            matchInfo.firstHalfResult != NOT_END,\\n            'First half was not updated'\\n        );\\n        require(\\n            matchInfo.secondHalfResult == NOT_END,\\n            'Second half was updated'\\n        );\\n        idToMatchInfo[_matchId].secondHalfResult = _result;\\n        emit MatchStatus(\\n            _matchId,\\n            matchInfo.matchCode,\\n            matchInfo.firstHalfResult,\\n            _result,\\n            0\\n        );\\n    }\\n\\n    function updateFulltime(uint256 _matchId, uint8 _result) public onlyOwner {\\n        MatchInfo memory matchInfo = idToMatchInfo[_matchId];\\n        require(\\n            matchInfo.firstHalfResult != NOT_END,\\n            'First half was not updated'\\n        );\\n        require(\\n            matchInfo.secondHalfResult != NOT_END,\\n            'Second half was not updated'\\n        );\\n        require(matchInfo.fulltimeResult == NOT_END, 'Fulltime was updated');\\n        idToMatchInfo[_matchId].fulltimeResult = _result;\\n        emit MatchStatus(\\n            _matchId,\\n            matchInfo.matchCode,\\n            matchInfo.firstHalfResult,\\n            matchInfo.secondHalfResult,\\n            _result\\n        );\\n    }\\n\\n    function userBet(\\n        uint256 _matchId,\\n        uint8 _betType,\\n        uint256 _amount,\\n        uint16 _oddsBet,\\n        uint8 _betResult,\\n        uint8 _starTicketId,\\n        bytes memory _hashedMessage\\n    ) public {\\n        MatchInfo memory matchInfo = idToMatchInfo[_matchId];\\n        require(_betResult != NOT_END, 'This bet result is invalid');\\n        bool isValidBet = true;\\n        if (_betType == FIRST_HALF && matchInfo.firstHalfResult != NOT_END) {\\n            isValidBet = false;\\n        }\\n        if (_betType == SECOND_HALF && matchInfo.secondHalfResult != NOT_END) {\\n            isValidBet = false;\\n        }\\n        if (_betType == FULLTIME && matchInfo.fulltimeResult != NOT_END) {\\n            isValidBet = false;\\n        }\\n        require(isValidBet, 'This bet information is invalid');\\n        isValidBet = VerifyBetInfo.verify(\\n            owner(),\\n            _matchId,\\n            _betType,\\n            _betResult,\\n            _amount,\\n            _oddsBet,\\n            _hashedMessage\\n        );\\n        require(isValidBet, 'This bet signature is invalid');\\n        if (_starTicketId > 0) {\\n            require(\\n                IERC1155(starTicket).balanceOf(msg.sender, _starTicketId) > 0,\\n                'Star ticket is invalid'\\n            );\\n        }\\n        uint256 itemId = betIds.current();\\n        idToBetInfo[itemId] = BetInfo(\\n            itemId,\\n            _matchId,\\n            _betType,\\n            _betResult,\\n            _oddsBet,\\n            _amount,\\n            _starTicketId,\\n            msg.sender,\\n            false\\n        );\\n        betIds.increment();\\n        IERC20(agbToken).transferFrom(msg.sender, treasury, _amount);\\n        if (_starTicketId > 0) {\\n            IERC1155(starTicket).safeTransferFrom(msg.sender, treasury, _starTicketId, 1, '');\\n        }\\n        emit BetStatus(\\n            itemId,\\n            _matchId,\\n            _betType,\\n            _betResult,\\n            _oddsBet,\\n            _amount,\\n            _starTicketId,\\n            msg.sender,\\n            false\\n        );\\n    }\\n\\n    function userClaim(uint256 _betId) public {\\n        BetInfo storage betInfo = idToBetInfo[_betId];\\n        MatchInfo memory matchInfo = idToMatchInfo[betInfo.matchId];\\n        require(msg.sender == betInfo.user, 'You are not owner of this bet');\\n        bool isValidClaim = true;\\n        if (\\n            betInfo.betType == FIRST_HALF &&\\n            matchInfo.firstHalfResult == NOT_END\\n        ) {\\n            isValidClaim = false;\\n        }\\n        if (\\n            betInfo.betType == SECOND_HALF &&\\n            matchInfo.secondHalfResult == NOT_END\\n        ) {\\n            isValidClaim = false;\\n        }\\n        if (\\n            betInfo.betType == FULLTIME && matchInfo.fulltimeResult == NOT_END\\n        ) {\\n            isValidClaim = false;\\n        }\\n        require(isValidClaim, 'This claim information is invalid');\\n        require(!betInfo.isClaim, 'User claimed');\\n        bool isWin = false;\\n        if (\\n            betInfo.betType == FIRST_HALF &&\\n            betInfo.betResult == matchInfo.firstHalfResult\\n        ) {\\n            isWin = true;\\n        }\\n        if (\\n            betInfo.betType == SECOND_HALF &&\\n            betInfo.betResult == matchInfo.secondHalfResult\\n        ) {\\n            isWin = true;\\n        }\\n        if (\\n            betInfo.betType == FULLTIME &&\\n            betInfo.betResult == matchInfo.fulltimeResult\\n        ) {\\n            isWin = true;\\n        }\\n        require(isWin, 'You lose');\\n        betInfo.isClaim = true;\\n        uint16 bonus = 0;\\n        if (betInfo.starTicketId > 0) {\\n            bonus = IStarTicket(starTicket).getBonusProfit(\\n                betInfo.starTicketId\\n            );\\n        }\\n        uint256 reward = (betInfo.oddsBet * betInfo.amount) /\\n        100 +\\n        (bonus * betInfo.amount * (betInfo.oddsBet - 100)) /\\n        100;\\n        IERC20(agbToken).transferFrom(treasury, msg.sender, reward);\\n        emit BetStatus(\\n            _betId,\\n            matchInfo.itemId,\\n            betInfo.betType,\\n            betInfo.betResult,\\n            betInfo.oddsBet,\\n            betInfo.amount,\\n            betInfo.starTicketId,\\n            msg.sender,\\n            true\\n        );\\n    }\\n\\n    function getMessageHash(\\n        uint256 _matchId,\\n        uint8 _betType,\\n        uint8 _betResult,\\n        uint256 _amount,\\n        uint256 _oddsBet\\n    ) public pure returns (bytes32) {\\n        return\\n        keccak256(abi.encodePacked(_matchId, _betType, _betResult, _amount, _oddsBet));\\n    }\\n}\\n\",\"keccak256\":\"0x7830c8dceb9452a5c2ed26f4386de71544fdb5ef7269881f93bb731a1108cfca\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IStarTicket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport '@openzeppelin/contracts/token/ERC1155/IERC1155.sol';\\n\\ninterface IStarTicket is IERC1155 {\\n    function getBonusProfit(uint8 _ticketId) external view returns (uint16);\\n}\",\"keccak256\":\"0xbda7bf78b36aff6b5ef4fdef70478fe1de10d2095481cf37d6c2429abef22b8c\",\"license\":\"MIT\"},\"contracts/libraries/VerifyBetInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nlibrary VerifyBetInfo {\\n    function getMessageHash(\\n        uint256 _matchId,\\n        uint8 _betType,\\n        uint8 _betResult,\\n        uint256 _amount,\\n        uint256 _oddsBet\\n    ) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(_matchId, _betType, _betResult, _amount, _oddsBet));\\n    }\\n\\n    function getEthSignedMessageHash(bytes32 _messageHash)\\n    internal\\n    pure\\n    returns (bytes32)\\n    {\\n        return\\n        keccak256(\\n            abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", _messageHash)\\n        );\\n    }\\n\\n    function verify(\\n        address _signer,\\n        uint256 _matchId,\\n        uint8 _betType,\\n        uint8 _betResult,\\n        uint256 _amount,\\n        uint256 _oddsBet,\\n        bytes memory signature\\n    ) internal pure returns (bool) {\\n        bytes32 messageHash = getMessageHash(_matchId, _betType, _betResult, _amount, _oddsBet);\\n        bytes32 ethSignedMessageHash = getEthSignedMessageHash(messageHash);\\n        address signer = recoverSigner(ethSignedMessageHash, signature);\\n        return signer == _signer;\\n    }\\n\\n    function recoverSigner(bytes32 _ethSignedMessageHash, bytes memory _signature)\\n    internal\\n    pure\\n    returns (address)\\n    {\\n        (bytes32 r, bytes32 s, uint8 v) = splitSignature(_signature);\\n        return ecrecover(_ethSignedMessageHash, v, r, s);\\n    }\\n\\n    function splitSignature(bytes memory sig)\\n    internal\\n    pure\\n    returns (\\n        bytes32 r,\\n        bytes32 s,\\n        uint8 v\\n    )\\n    {\\n        require(sig.length == 65, \\\"invalid signature length\\\");\\n        assembly {\\n            r := mload(add(sig, 32))\\n            s := mload(add(sig, 64))\\n            v := byte(0, mload(add(sig, 96)))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x18c2c5dce6fcc3f4c16a4da661be59a902ce817fec952cebbe07025acfe8e13a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002870380380620028708339810160408190526200003491620000ef565b6200003f3362000082565b600380546001600160a01b039485166001600160a01b03199182161790915560048054938516938216939093179092556005805491909316911617905562000139565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b0381168114620000ea57600080fd5b919050565b6000806000606084860312156200010557600080fd5b6200011084620000d2565b92506200012060208501620000d2565b91506200013060408501620000d2565b90509250925092565b61272780620001496000396000f3fe608060405234801561001057600080fd5b506004361061011b5760003560e01c80638da5cb5b116100b2578063b5182fc211610081578063e388eeb111610066578063e388eeb1146103e4578063f2fde38b146103ee578063fe43efda1461040157600080fd5b8063b5182fc2146103b1578063bc0e7a74146103c457600080fd5b80638da5cb5b146103635780638e292aa8146103815780639fda6edc14610394578063b49bf5d9146103a757600080fd5b80635762b50c116100ee5780635762b50c1461023257806361d027b31461024557806362f8414b14610265578063715018a61461035b57600080fd5b806304f5b230146101205780632156430c1461014d578063251e754d146101625780633e1f9320146101ed575b600080fd5b61013361012e366004612208565b610414565b60405161014495949392919061228c565b60405180910390f35b61016061015b3660046122df565b6104d5565b005b6101df61017036600461230b565b604080516020808201979097527fff0000000000000000000000000000000000000000000000000000000000000060f896871b8116828401529490951b909316604185015260428401919091526062808401919091528151808403909101815260829092019052805191012090565b604051908152602001610144565b60055461020d9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610144565b61016061024036600461241c565b61073c565b60035461020d9073ffffffffffffffffffffffffffffffffffffffff1681565b6102f3610273366004612208565b600760205260009081526040902080546001820154600283015460038401546004909401549293919260ff8083169361010080850483169462010000900461ffff169391928083169291820473ffffffffffffffffffffffffffffffffffffffff1691750100000000000000000000000000000000000000000090041689565b60408051998a5260208a019890985260ff96871697890197909752938516606088015261ffff909216608087015260a08601529190911660c084015273ffffffffffffffffffffffffffffffffffffffff1660e0830152151561010082015261012001610144565b6101606108e9565b60005473ffffffffffffffffffffffffffffffffffffffff1661020d565b61016061038f3660046122df565b610976565b6101606103a23660046122df565b610c40565b6002546101df9081565b6101606103bf36600461247d565b610f80565b60045461020d9073ffffffffffffffffffffffffffffffffffffffff1681565b6001546101df9081565b6101606103fc366004612526565b6116e2565b61016061040f366004612208565b611812565b6006602052600090815260409020805460018201805491929161043690612563565b80601f016020809104026020016040519081016040528092919081815260200182805461046290612563565b80156104af5780601f10610484576101008083540402835291602001916104af565b820191906000526020600020905b81548152906001019060200180831161049257829003601f168201915b5050506002909301549192505060ff808216916101008104821691620100009091041685565b60005473ffffffffffffffffffffffffffffffffffffffff16331461055b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6000600660008481526020019081526020016000206040518060a00160405290816000820154815260200160018201805461059590612563565b80601f01602080910402602001604051908101604052809291908181526020018280546105c190612563565b801561060e5780601f106105e35761010080835404028352916020019161060e565b820191906000526020600020905b8154815290600101906020018083116105f157829003601f168201915b50505091835250506002919091015460ff80821660208401526101008204811660408085019190915262010000909204811660609093019290925282015191925016156106b7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f46697273742068616c66207761732075706461746564000000000000000000006044820152606401610552565b600083815260066020908152604080832060020180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff87161790559083015190517fccea705e41addfe441189b24872e69bc5ff6e968cd49909c25c36681f334e24e9261072f92879290918791819061228c565b60405180910390a1505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146107bd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610552565b60006107c860015490565b6040805160a08101825282815260208082018681526000838501819052606084018190526080840181905285815260068352939093208251815592518051949550919361081b926001850192019061216f565b50604082015160029091018054606084015160809094015160ff90811662010000027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffff958216610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000909316919094161717929092161790556108a4600180546001019055565b7fccea705e41addfe441189b24872e69bc5ff6e968cd49909c25c36681f334e24e818360008060006040516108dd95949392919061228c565b60405180910390a15050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461096a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610552565b6109746000611ee8565b565b60005473ffffffffffffffffffffffffffffffffffffffff1633146109f7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610552565b6000600660008481526020019081526020016000206040518060a001604052908160008201548152602001600182018054610a3190612563565b80601f0160208091040260200160405190810160405280929190818152602001828054610a5d90612563565b8015610aaa5780601f10610a7f57610100808354040283529160200191610aaa565b820191906000526020600020905b815481529060010190602001808311610a8d57829003601f168201915b50505091835250506002919091015460ff80821660208401526101008204811660408085019190915262010000909204811660609093019290925282015191925016610b52576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f46697273742068616c6620776173206e6f7420757064617465640000000000006044820152606401610552565b606081015160ff1615610bc1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f5365636f6e642068616c662077617320757064617465640000000000000000006044820152606401610552565b600083815260066020908152604080832060020180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1661010060ff881602179055908301518382015191517fccea705e41addfe441189b24872e69bc5ff6e968cd49909c25c36681f334e24e9361072f938893929091889161228c565b60005473ffffffffffffffffffffffffffffffffffffffff163314610cc1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610552565b6000600660008481526020019081526020016000206040518060a001604052908160008201548152602001600182018054610cfb90612563565b80601f0160208091040260200160405190810160405280929190818152602001828054610d2790612563565b8015610d745780601f10610d4957610100808354040283529160200191610d74565b820191906000526020600020905b815481529060010190602001808311610d5757829003601f168201915b50505091835250506002919091015460ff80821660208401526101008204811660408085019190915262010000909204811660609093019290925282015191925016610e1c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f46697273742068616c6620776173206e6f7420757064617465640000000000006044820152606401610552565b606081015160ff16610e8a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f5365636f6e642068616c6620776173206e6f74207570646174656400000000006044820152606401610552565b608081015160ff1615610ef9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f46756c6c74696d652077617320757064617465640000000000000000000000006044820152606401610552565b60008381526006602090815260409182902060020180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffff166201000060ff87160217905582015182820151606084015192517fccea705e41addfe441189b24872e69bc5ff6e968cd49909c25c36681f334e24e9361072f9388939092909190889061228c565b6000600660008981526020019081526020016000206040518060a001604052908160008201548152602001600182018054610fba90612563565b80601f0160208091040260200160405190810160405280929190818152602001828054610fe690612563565b80156110335780601f1061100857610100808354040283529160200191611033565b820191906000526020600020905b81548152906001019060200180831161101657829003601f168201915b50505091835250506002919091015460ff808216602084015261010082048116604084015262010000909104811660609092019190915290915084166110d5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f546869732062657420726573756c7420697320696e76616c69640000000000006044820152606401610552565b600160ff88161580156110ee5750604082015160ff1615155b156110f7575060005b60ff881660011480156111105750606082015160ff1615155b15611119575060005b60ff881660021480156111325750608082015160ff1615155b1561113b575060005b806111a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f546869732062657420696e666f726d6174696f6e20697320696e76616c6964006044820152606401610552565b6111d36111c460005473ffffffffffffffffffffffffffffffffffffffff1690565b8a8a888b8b61ffff1689611f5d565b90508061123c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f5468697320626574207369676e617475726520697320696e76616c69640000006044820152606401610552565b60ff841615611355576005546040517efdd58e00000000000000000000000000000000000000000000000000000000815233600482015260ff8616602482015260009173ffffffffffffffffffffffffffffffffffffffff169062fdd58e9060440160206040518083038186803b1580156112b657600080fd5b505afa1580156112ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ee91906125b7565b11611355576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f53746172207469636b657420697320696e76616c6964000000000000000000006044820152606401610552565b600061136060025490565b90506040518061012001604052808281526020018b81526020018a60ff1681526020018760ff1681526020018861ffff1681526020018981526020018660ff1681526020013373ffffffffffffffffffffffffffffffffffffffff1681526020016000151581525060076000838152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548160ff021916908360ff16021790555060608201518160020160016101000a81548160ff021916908360ff16021790555060808201518160020160026101000a81548161ffff021916908361ffff16021790555060a0820151816003015560c08201518160040160006101000a81548160ff021916908360ff16021790555060e08201518160040160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506101008201518160040160156101000a81548160ff0219169083151502179055509050506114f8600280546001019055565b600480546003546040517f23b872dd000000000000000000000000000000000000000000000000000000008152339381019390935273ffffffffffffffffffffffffffffffffffffffff9081166024840152604483018b905216906323b872dd90606401602060405180830381600087803b15801561157657600080fd5b505af115801561158a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ae91906125d0565b5060ff851615611664576005546003546040517ff242432a00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff918216602482015260ff881660448201526001606482015260a06084820152600060a482015291169063f242432a9060c401600060405180830381600087803b15801561164b57600080fd5b505af115801561165f573d6000803e3d6000fd5b505050505b60408051828152602081018c905260ff8b811682840152888116606083015261ffff8a16608083015260a082018b9052871660c08201523360e0820152600061010082015290517febea08cae94449583286e8c7d521b8dd41dff5c8ee617ac5a4f07a23e6afbf5d918190036101200190a150505050505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314611763576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610552565b73ffffffffffffffffffffffffffffffffffffffff8116611806576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610552565b61180f81611ee8565b50565b6000818152600760209081526040808320600180820154855260068452828520835160a0810190945280548452908101805492959491929184019161185690612563565b80601f016020809104026020016040519081016040528092919081815260200182805461188290612563565b80156118cf5780601f106118a4576101008083540402835291602001916118cf565b820191906000526020600020905b8154815290600101906020018083116118b257829003601f168201915b50505091835250506002919091015460ff80821660208401526101008083048216604085015262010000909204166060909201919091526004840154919250900473ffffffffffffffffffffffffffffffffffffffff16331461198e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f596f7520617265206e6f74206f776e6572206f662074686973206265740000006044820152606401610552565b600282015460019060ff161580156119ab5750604082015160ff16155b156119b4575060005b600283015460ff1660011480156119d05750606082015160ff16155b156119d9575060005b60028381015460ff161480156119f45750608082015160ff16155b156119fd575060005b80611a8a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f5468697320636c61696d20696e666f726d6174696f6e20697320696e76616c6960448201527f64000000000000000000000000000000000000000000000000000000000000006064820152608401610552565b60048301547501000000000000000000000000000000000000000000900460ff1615611b12576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f5573657220636c61696d656400000000000000000000000000000000000000006044820152606401610552565b600283015460009060ff16158015611b3d575060408301516002850154610100900460ff9081169116145b15611b46575060015b600284015460ff166001148015611b70575060608301516002850154610100900460ff9081169116145b15611b79575060015b60028481015460ff16148015611ba2575060808301516002850154610100900460ff9081169116145b15611bab575060015b80611c12576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f596f75206c6f73650000000000000000000000000000000000000000000000006044820152606401610552565b6004840180547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff811675010000000000000000000000000000000000000000001790915560009060ff1615611d11576005546004868101546040517f6fa08af300000000000000000000000000000000000000000000000000000000815260ff9091169181019190915273ffffffffffffffffffffffffffffffffffffffff90911690636fa08af39060240160206040518083038186803b158015611cd657600080fd5b505afa158015611cea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d0e91906125f2565b90505b6002850154600090606490611d3190829062010000900461ffff1661263e565b61ffff1687600301548461ffff16611d499190612661565b611d539190612661565b611d5d919061269e565b60038701546002880154606491611d7d9162010000900461ffff16612661565b611d87919061269e565b611d9191906126d9565b600480546003546040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff918216938101939093523360248401526044830184905292935091909116906323b872dd90606401602060405180830381600087803b158015611e1557600080fd5b505af1158015611e29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e4d91906125d0565b508451600287015460038801546004890154604080518c8152602081019590955260ff80851691860191909152610100808504821660608701526201000090940461ffff16608086015260a08501929092521660c08301523360e08301526001908201527febea08cae94449583286e8c7d521b8dd41dff5c8ee617ac5a4f07a23e6afbf5d906101200160405180910390a150505050505050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040805160208082018990527fff0000000000000000000000000000000000000000000000000000000000000060f889811b82168486015288901b166041830152604282018690526062808301869052835180840390910181526082830184528051908201207f19457468657265756d205369676e6564204d6573736167653a0a33320000000060a284015260be8084018290528451808503909101815260de90930190935281519101206000919060006120188286612044565b73ffffffffffffffffffffffffffffffffffffffff908116908c16149350505050979650505050505050565b600080600080612053856120e1565b6040805160008152602081018083528b905260ff8316918101919091526060810184905260808101839052929550909350915060019060a0016020604051602081039080840390855afa1580156120ae573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00151979650505050505050565b60008060008351604114612151576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f696e76616c6964207369676e6174757265206c656e67746800000000000000006044820152606401610552565b50505060208101516040820151606090920151909260009190911a90565b82805461217b90612563565b90600052602060002090601f01602090048101928261219d57600085556121e3565b82601f106121b657805160ff19168380011785556121e3565b828001600101855582156121e3579182015b828111156121e35782518255916020019190600101906121c8565b506121ef9291506121f3565b5090565b5b808211156121ef57600081556001016121f4565b60006020828403121561221a57600080fd5b5035919050565b6000815180845260005b818110156122475760208185018101518683018201520161222b565b81811115612259576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b85815260a0602082015260006122a560a0830187612221565b60ff9586166040840152938516606083015250921660809092019190915292915050565b803560ff811681146122da57600080fd5b919050565b600080604083850312156122f257600080fd5b82359150612302602084016122c9565b90509250929050565b600080600080600060a0868803121561232357600080fd5b85359450612333602087016122c9565b9350612341604087016122c9565b94979396509394606081013594506080013592915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600067ffffffffffffffff808411156123a3576123a3612359565b604051601f85017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019082821181831017156123e9576123e9612359565b8160405280935085815286868601111561240257600080fd5b858560208301376000602087830101525050509392505050565b60006020828403121561242e57600080fd5b813567ffffffffffffffff81111561244557600080fd5b8201601f8101841361245657600080fd5b61246584823560208401612388565b949350505050565b61ffff8116811461180f57600080fd5b600080600080600080600060e0888a03121561249857600080fd5b873596506124a8602089016122c9565b95506040880135945060608801356124bf8161246d565b93506124cd608089016122c9565b92506124db60a089016122c9565b915060c088013567ffffffffffffffff8111156124f757600080fd5b8801601f81018a1361250857600080fd5b6125178a823560208401612388565b91505092959891949750929550565b60006020828403121561253857600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461255c57600080fd5b9392505050565b600181811c9082168061257757607f821691505b602082108114156125b1577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b6000602082840312156125c957600080fd5b5051919050565b6000602082840312156125e257600080fd5b8151801515811461255c57600080fd5b60006020828403121561260457600080fd5b815161255c8161246d565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061ffff838116908316818110156126595761265961260f565b039392505050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156126995761269961260f565b500290565b6000826126d4577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600082198211156126ec576126ec61260f565b50019056fea26469706673582212205a790e4a76cfb34d930f639a907f5439282fcdf5d3886ad733389fbcb0388c6664736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061011b5760003560e01c80638da5cb5b116100b2578063b5182fc211610081578063e388eeb111610066578063e388eeb1146103e4578063f2fde38b146103ee578063fe43efda1461040157600080fd5b8063b5182fc2146103b1578063bc0e7a74146103c457600080fd5b80638da5cb5b146103635780638e292aa8146103815780639fda6edc14610394578063b49bf5d9146103a757600080fd5b80635762b50c116100ee5780635762b50c1461023257806361d027b31461024557806362f8414b14610265578063715018a61461035b57600080fd5b806304f5b230146101205780632156430c1461014d578063251e754d146101625780633e1f9320146101ed575b600080fd5b61013361012e366004612208565b610414565b60405161014495949392919061228c565b60405180910390f35b61016061015b3660046122df565b6104d5565b005b6101df61017036600461230b565b604080516020808201979097527fff0000000000000000000000000000000000000000000000000000000000000060f896871b8116828401529490951b909316604185015260428401919091526062808401919091528151808403909101815260829092019052805191012090565b604051908152602001610144565b60055461020d9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610144565b61016061024036600461241c565b61073c565b60035461020d9073ffffffffffffffffffffffffffffffffffffffff1681565b6102f3610273366004612208565b600760205260009081526040902080546001820154600283015460038401546004909401549293919260ff8083169361010080850483169462010000900461ffff169391928083169291820473ffffffffffffffffffffffffffffffffffffffff1691750100000000000000000000000000000000000000000090041689565b60408051998a5260208a019890985260ff96871697890197909752938516606088015261ffff909216608087015260a08601529190911660c084015273ffffffffffffffffffffffffffffffffffffffff1660e0830152151561010082015261012001610144565b6101606108e9565b60005473ffffffffffffffffffffffffffffffffffffffff1661020d565b61016061038f3660046122df565b610976565b6101606103a23660046122df565b610c40565b6002546101df9081565b6101606103bf36600461247d565b610f80565b60045461020d9073ffffffffffffffffffffffffffffffffffffffff1681565b6001546101df9081565b6101606103fc366004612526565b6116e2565b61016061040f366004612208565b611812565b6006602052600090815260409020805460018201805491929161043690612563565b80601f016020809104026020016040519081016040528092919081815260200182805461046290612563565b80156104af5780601f10610484576101008083540402835291602001916104af565b820191906000526020600020905b81548152906001019060200180831161049257829003601f168201915b5050506002909301549192505060ff808216916101008104821691620100009091041685565b60005473ffffffffffffffffffffffffffffffffffffffff16331461055b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6000600660008481526020019081526020016000206040518060a00160405290816000820154815260200160018201805461059590612563565b80601f01602080910402602001604051908101604052809291908181526020018280546105c190612563565b801561060e5780601f106105e35761010080835404028352916020019161060e565b820191906000526020600020905b8154815290600101906020018083116105f157829003601f168201915b50505091835250506002919091015460ff80821660208401526101008204811660408085019190915262010000909204811660609093019290925282015191925016156106b7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f46697273742068616c66207761732075706461746564000000000000000000006044820152606401610552565b600083815260066020908152604080832060020180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff87161790559083015190517fccea705e41addfe441189b24872e69bc5ff6e968cd49909c25c36681f334e24e9261072f92879290918791819061228c565b60405180910390a1505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146107bd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610552565b60006107c860015490565b6040805160a08101825282815260208082018681526000838501819052606084018190526080840181905285815260068352939093208251815592518051949550919361081b926001850192019061216f565b50604082015160029091018054606084015160809094015160ff90811662010000027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffff958216610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000909316919094161717929092161790556108a4600180546001019055565b7fccea705e41addfe441189b24872e69bc5ff6e968cd49909c25c36681f334e24e818360008060006040516108dd95949392919061228c565b60405180910390a15050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461096a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610552565b6109746000611ee8565b565b60005473ffffffffffffffffffffffffffffffffffffffff1633146109f7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610552565b6000600660008481526020019081526020016000206040518060a001604052908160008201548152602001600182018054610a3190612563565b80601f0160208091040260200160405190810160405280929190818152602001828054610a5d90612563565b8015610aaa5780601f10610a7f57610100808354040283529160200191610aaa565b820191906000526020600020905b815481529060010190602001808311610a8d57829003601f168201915b50505091835250506002919091015460ff80821660208401526101008204811660408085019190915262010000909204811660609093019290925282015191925016610b52576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f46697273742068616c6620776173206e6f7420757064617465640000000000006044820152606401610552565b606081015160ff1615610bc1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f5365636f6e642068616c662077617320757064617465640000000000000000006044820152606401610552565b600083815260066020908152604080832060020180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1661010060ff881602179055908301518382015191517fccea705e41addfe441189b24872e69bc5ff6e968cd49909c25c36681f334e24e9361072f938893929091889161228c565b60005473ffffffffffffffffffffffffffffffffffffffff163314610cc1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610552565b6000600660008481526020019081526020016000206040518060a001604052908160008201548152602001600182018054610cfb90612563565b80601f0160208091040260200160405190810160405280929190818152602001828054610d2790612563565b8015610d745780601f10610d4957610100808354040283529160200191610d74565b820191906000526020600020905b815481529060010190602001808311610d5757829003601f168201915b50505091835250506002919091015460ff80821660208401526101008204811660408085019190915262010000909204811660609093019290925282015191925016610e1c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f46697273742068616c6620776173206e6f7420757064617465640000000000006044820152606401610552565b606081015160ff16610e8a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f5365636f6e642068616c6620776173206e6f74207570646174656400000000006044820152606401610552565b608081015160ff1615610ef9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f46756c6c74696d652077617320757064617465640000000000000000000000006044820152606401610552565b60008381526006602090815260409182902060020180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffff166201000060ff87160217905582015182820151606084015192517fccea705e41addfe441189b24872e69bc5ff6e968cd49909c25c36681f334e24e9361072f9388939092909190889061228c565b6000600660008981526020019081526020016000206040518060a001604052908160008201548152602001600182018054610fba90612563565b80601f0160208091040260200160405190810160405280929190818152602001828054610fe690612563565b80156110335780601f1061100857610100808354040283529160200191611033565b820191906000526020600020905b81548152906001019060200180831161101657829003601f168201915b50505091835250506002919091015460ff808216602084015261010082048116604084015262010000909104811660609092019190915290915084166110d5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f546869732062657420726573756c7420697320696e76616c69640000000000006044820152606401610552565b600160ff88161580156110ee5750604082015160ff1615155b156110f7575060005b60ff881660011480156111105750606082015160ff1615155b15611119575060005b60ff881660021480156111325750608082015160ff1615155b1561113b575060005b806111a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f546869732062657420696e666f726d6174696f6e20697320696e76616c6964006044820152606401610552565b6111d36111c460005473ffffffffffffffffffffffffffffffffffffffff1690565b8a8a888b8b61ffff1689611f5d565b90508061123c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f5468697320626574207369676e617475726520697320696e76616c69640000006044820152606401610552565b60ff841615611355576005546040517efdd58e00000000000000000000000000000000000000000000000000000000815233600482015260ff8616602482015260009173ffffffffffffffffffffffffffffffffffffffff169062fdd58e9060440160206040518083038186803b1580156112b657600080fd5b505afa1580156112ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ee91906125b7565b11611355576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f53746172207469636b657420697320696e76616c6964000000000000000000006044820152606401610552565b600061136060025490565b90506040518061012001604052808281526020018b81526020018a60ff1681526020018760ff1681526020018861ffff1681526020018981526020018660ff1681526020013373ffffffffffffffffffffffffffffffffffffffff1681526020016000151581525060076000838152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548160ff021916908360ff16021790555060608201518160020160016101000a81548160ff021916908360ff16021790555060808201518160020160026101000a81548161ffff021916908361ffff16021790555060a0820151816003015560c08201518160040160006101000a81548160ff021916908360ff16021790555060e08201518160040160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506101008201518160040160156101000a81548160ff0219169083151502179055509050506114f8600280546001019055565b600480546003546040517f23b872dd000000000000000000000000000000000000000000000000000000008152339381019390935273ffffffffffffffffffffffffffffffffffffffff9081166024840152604483018b905216906323b872dd90606401602060405180830381600087803b15801561157657600080fd5b505af115801561158a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ae91906125d0565b5060ff851615611664576005546003546040517ff242432a00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff918216602482015260ff881660448201526001606482015260a06084820152600060a482015291169063f242432a9060c401600060405180830381600087803b15801561164b57600080fd5b505af115801561165f573d6000803e3d6000fd5b505050505b60408051828152602081018c905260ff8b811682840152888116606083015261ffff8a16608083015260a082018b9052871660c08201523360e0820152600061010082015290517febea08cae94449583286e8c7d521b8dd41dff5c8ee617ac5a4f07a23e6afbf5d918190036101200190a150505050505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314611763576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610552565b73ffffffffffffffffffffffffffffffffffffffff8116611806576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610552565b61180f81611ee8565b50565b6000818152600760209081526040808320600180820154855260068452828520835160a0810190945280548452908101805492959491929184019161185690612563565b80601f016020809104026020016040519081016040528092919081815260200182805461188290612563565b80156118cf5780601f106118a4576101008083540402835291602001916118cf565b820191906000526020600020905b8154815290600101906020018083116118b257829003601f168201915b50505091835250506002919091015460ff80821660208401526101008083048216604085015262010000909204166060909201919091526004840154919250900473ffffffffffffffffffffffffffffffffffffffff16331461198e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f596f7520617265206e6f74206f776e6572206f662074686973206265740000006044820152606401610552565b600282015460019060ff161580156119ab5750604082015160ff16155b156119b4575060005b600283015460ff1660011480156119d05750606082015160ff16155b156119d9575060005b60028381015460ff161480156119f45750608082015160ff16155b156119fd575060005b80611a8a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f5468697320636c61696d20696e666f726d6174696f6e20697320696e76616c6960448201527f64000000000000000000000000000000000000000000000000000000000000006064820152608401610552565b60048301547501000000000000000000000000000000000000000000900460ff1615611b12576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f5573657220636c61696d656400000000000000000000000000000000000000006044820152606401610552565b600283015460009060ff16158015611b3d575060408301516002850154610100900460ff9081169116145b15611b46575060015b600284015460ff166001148015611b70575060608301516002850154610100900460ff9081169116145b15611b79575060015b60028481015460ff16148015611ba2575060808301516002850154610100900460ff9081169116145b15611bab575060015b80611c12576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f596f75206c6f73650000000000000000000000000000000000000000000000006044820152606401610552565b6004840180547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff811675010000000000000000000000000000000000000000001790915560009060ff1615611d11576005546004868101546040517f6fa08af300000000000000000000000000000000000000000000000000000000815260ff9091169181019190915273ffffffffffffffffffffffffffffffffffffffff90911690636fa08af39060240160206040518083038186803b158015611cd657600080fd5b505afa158015611cea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d0e91906125f2565b90505b6002850154600090606490611d3190829062010000900461ffff1661263e565b61ffff1687600301548461ffff16611d499190612661565b611d539190612661565b611d5d919061269e565b60038701546002880154606491611d7d9162010000900461ffff16612661565b611d87919061269e565b611d9191906126d9565b600480546003546040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff918216938101939093523360248401526044830184905292935091909116906323b872dd90606401602060405180830381600087803b158015611e1557600080fd5b505af1158015611e29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e4d91906125d0565b508451600287015460038801546004890154604080518c8152602081019590955260ff80851691860191909152610100808504821660608701526201000090940461ffff16608086015260a08501929092521660c08301523360e08301526001908201527febea08cae94449583286e8c7d521b8dd41dff5c8ee617ac5a4f07a23e6afbf5d906101200160405180910390a150505050505050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040805160208082018990527fff0000000000000000000000000000000000000000000000000000000000000060f889811b82168486015288901b166041830152604282018690526062808301869052835180840390910181526082830184528051908201207f19457468657265756d205369676e6564204d6573736167653a0a33320000000060a284015260be8084018290528451808503909101815260de90930190935281519101206000919060006120188286612044565b73ffffffffffffffffffffffffffffffffffffffff908116908c16149350505050979650505050505050565b600080600080612053856120e1565b6040805160008152602081018083528b905260ff8316918101919091526060810184905260808101839052929550909350915060019060a0016020604051602081039080840390855afa1580156120ae573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00151979650505050505050565b60008060008351604114612151576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f696e76616c6964207369676e6174757265206c656e67746800000000000000006044820152606401610552565b50505060208101516040820151606090920151909260009190911a90565b82805461217b90612563565b90600052602060002090601f01602090048101928261219d57600085556121e3565b82601f106121b657805160ff19168380011785556121e3565b828001600101855582156121e3579182015b828111156121e35782518255916020019190600101906121c8565b506121ef9291506121f3565b5090565b5b808211156121ef57600081556001016121f4565b60006020828403121561221a57600080fd5b5035919050565b6000815180845260005b818110156122475760208185018101518683018201520161222b565b81811115612259576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b85815260a0602082015260006122a560a0830187612221565b60ff9586166040840152938516606083015250921660809092019190915292915050565b803560ff811681146122da57600080fd5b919050565b600080604083850312156122f257600080fd5b82359150612302602084016122c9565b90509250929050565b600080600080600060a0868803121561232357600080fd5b85359450612333602087016122c9565b9350612341604087016122c9565b94979396509394606081013594506080013592915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600067ffffffffffffffff808411156123a3576123a3612359565b604051601f85017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019082821181831017156123e9576123e9612359565b8160405280935085815286868601111561240257600080fd5b858560208301376000602087830101525050509392505050565b60006020828403121561242e57600080fd5b813567ffffffffffffffff81111561244557600080fd5b8201601f8101841361245657600080fd5b61246584823560208401612388565b949350505050565b61ffff8116811461180f57600080fd5b600080600080600080600060e0888a03121561249857600080fd5b873596506124a8602089016122c9565b95506040880135945060608801356124bf8161246d565b93506124cd608089016122c9565b92506124db60a089016122c9565b915060c088013567ffffffffffffffff8111156124f757600080fd5b8801601f81018a1361250857600080fd5b6125178a823560208401612388565b91505092959891949750929550565b60006020828403121561253857600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461255c57600080fd5b9392505050565b600181811c9082168061257757607f821691505b602082108114156125b1577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b6000602082840312156125c957600080fd5b5051919050565b6000602082840312156125e257600080fd5b8151801515811461255c57600080fd5b60006020828403121561260457600080fd5b815161255c8161246d565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061ffff838116908316818110156126595761265961260f565b039392505050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156126995761269961260f565b500290565b6000826126d4577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600082198211156126ec576126ec61260f565b50019056fea26469706673582212205a790e4a76cfb34d930f639a907f5439282fcdf5d3886ad733389fbcb0388c6664736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Bet.sol:Bet",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1024,
        "contract": "contracts/Bet.sol:Bet",
        "label": "matchIds",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Counter)331_storage"
      },
      {
        "astId": 1027,
        "contract": "contracts/Bet.sol:Bet",
        "label": "betIds",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(Counter)331_storage"
      },
      {
        "astId": 1029,
        "contract": "contracts/Bet.sol:Bet",
        "label": "treasury",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 1031,
        "contract": "contracts/Bet.sol:Bet",
        "label": "agbToken",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 1033,
        "contract": "contracts/Bet.sol:Bet",
        "label": "starTicket",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 1038,
        "contract": "contracts/Bet.sol:Bet",
        "label": "idToMatchInfo",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(MatchInfo)1086_storage)"
      },
      {
        "astId": 1043,
        "contract": "contracts/Bet.sol:Bet",
        "label": "idToBetInfo",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_struct(BetInfo)1105_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_struct(BetInfo)1105_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Bet.BetInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(BetInfo)1105_storage"
      },
      "t_mapping(t_uint256,t_struct(MatchInfo)1086_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Bet.MatchInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(MatchInfo)1086_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(BetInfo)1105_storage": {
        "encoding": "inplace",
        "label": "struct Bet.BetInfo",
        "members": [
          {
            "astId": 1088,
            "contract": "contracts/Bet.sol:Bet",
            "label": "betId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1090,
            "contract": "contracts/Bet.sol:Bet",
            "label": "matchId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1092,
            "contract": "contracts/Bet.sol:Bet",
            "label": "betType",
            "offset": 0,
            "slot": "2",
            "type": "t_uint8"
          },
          {
            "astId": 1094,
            "contract": "contracts/Bet.sol:Bet",
            "label": "betResult",
            "offset": 1,
            "slot": "2",
            "type": "t_uint8"
          },
          {
            "astId": 1096,
            "contract": "contracts/Bet.sol:Bet",
            "label": "oddsBet",
            "offset": 2,
            "slot": "2",
            "type": "t_uint16"
          },
          {
            "astId": 1098,
            "contract": "contracts/Bet.sol:Bet",
            "label": "amount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1100,
            "contract": "contracts/Bet.sol:Bet",
            "label": "starTicketId",
            "offset": 0,
            "slot": "4",
            "type": "t_uint8"
          },
          {
            "astId": 1102,
            "contract": "contracts/Bet.sol:Bet",
            "label": "user",
            "offset": 1,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 1104,
            "contract": "contracts/Bet.sol:Bet",
            "label": "isClaim",
            "offset": 21,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Counter)331_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 330,
            "contract": "contracts/Bet.sol:Bet",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(MatchInfo)1086_storage": {
        "encoding": "inplace",
        "label": "struct Bet.MatchInfo",
        "members": [
          {
            "astId": 1077,
            "contract": "contracts/Bet.sol:Bet",
            "label": "itemId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1079,
            "contract": "contracts/Bet.sol:Bet",
            "label": "matchCode",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1081,
            "contract": "contracts/Bet.sol:Bet",
            "label": "firstHalfResult",
            "offset": 0,
            "slot": "2",
            "type": "t_uint8"
          },
          {
            "astId": 1083,
            "contract": "contracts/Bet.sol:Bet",
            "label": "secondHalfResult",
            "offset": 1,
            "slot": "2",
            "type": "t_uint8"
          },
          {
            "astId": 1085,
            "contract": "contracts/Bet.sol:Bet",
            "label": "fulltimeResult",
            "offset": 2,
            "slot": "2",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}